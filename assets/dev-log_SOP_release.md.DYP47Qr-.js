import{_ as s,c as e,o,ag as a}from"./chunks/framework.Cs5y-aXb.js";const g=JSON.parse('{"title":"pomotention 应用版本发布标准作业程序 (SOP)","description":"","frontmatter":{},"headers":[],"relativePath":"dev-log/SOP/release.md","filePath":"dev-log/SOP/release.md","lastUpdated":1757302492000}'),l={name:"dev-log/SOP/release.md"};function i(t,n,p,c,d,r){return o(),e("div",null,n[0]||(n[0]=[a(`<h1 id="pomotention-应用版本发布标准作业程序-sop" tabindex="-1"><strong><code>pomotention</code> 应用版本发布标准作业程序 (SOP)</strong> <a class="header-anchor" href="#pomotention-应用版本发布标准作业程序-sop" aria-label="Permalink to &quot;**\`pomotention\` 应用版本发布标准作业程序 (SOP)**&quot;">​</a></h1><h2 id="阶段一-准备工作-在主开发机上-windows" tabindex="-1">阶段一：准备工作 (在主开发机上，Windows) <a class="header-anchor" href="#阶段一-准备工作-在主开发机上-windows" aria-label="Permalink to &quot;阶段一：准备工作 (在主开发机上，Windows)&quot;">​</a></h2><p>此阶段的目标是确保代码已经准备就绪，可以进行打包。</p><ul><li><p>[ ] <strong>1. 功能冻结与测试：</strong></p><ul><li>[ ] 确认当前版本要包含的所有新功能都已完成并合并到主分支（如 <code>main</code> 或 <code>develop</code>）。</li><li>[ ] 在开发环境中对所有核心功能进行一次完整的回归测试，确保没有明显 BUG。</li></ul></li><li><p>[ ] <strong>2. 更新版本号：</strong></p><ul><li>[ ] <strong><code>package.json</code></strong>: 修改 <code>version</code> 字段 (例如从 <code>0.5.0</code> -&gt; <code>0.6.0</code>)。</li><li>[ ] <strong><code>src-tauri/tauri.conf.json</code></strong>: 修改 <code>package.version</code> 字段，使其与 <code>package.json</code> 同步。</li><li>[ ] <strong><code>src-tauri/Cargo.toml</code></strong>: 确认 <code>package.version</code> 字段已同步。<em>(Tauri 通常会自动处理，但手动检查更保险)</em></li></ul></li><li><p>[ ] <strong>3. 代码归档：</strong></p><ul><li>[ ] 将所有代码变更提交到 Git: <code>git add .</code> -&gt; <code>git commit -m &quot;chore(release): bump version to v0.6.0&quot;</code></li><li>[ ] 推送提交到远程仓库: <code>git push</code></li><li>[ ] 创建并推送新的 Git Tag: <code>git tag v0.6.0</code> -&gt; <code>git push origin v0.6.0</code></li><li>[ ] 利用 commit 确定 changelog： <code>git log vOld.Tag..vNew.Tag --oneline</code></li><li>[ ] 编写更新日志： <code>getting-started.md</code> 和 <code>roadmap.md</code>，部署到 <code>git page</code></li></ul></li></ul><h2 id="阶段二-windows-平台构建" tabindex="-1">阶段二：Windows 平台构建 <a class="header-anchor" href="#阶段二-windows-平台构建" aria-label="Permalink to &quot;阶段二：Windows 平台构建&quot;">​</a></h2><p>此阶段的目标是生成 Windows 平台的安装包和签名文件。</p><ul><li><p>[ ] <strong>1. 准备签名环境：</strong></p><ul><li>[ ] 确保 Tauri 签名所需的 <code>private.key</code> 文件已准备好。</li></ul></li><li><p>[ ] <strong>2. 执行打包命令：</strong></p><ul><li>[ ] 在项目根目录运行: <code>pnpm run tauri build</code></li><li>[ ] 根据提示输入私钥密码以完成代码签名。</li></ul></li><li><p>[ ] <strong>3. 整理产物：</strong></p><ul><li>[ ] 打包完成后，进入 <code>src-tauri/target/release/bundle/</code> 目录。</li><li>[ ] 找到生成的 <code>.exe</code> 安装器和 <code>.msi</code> 包。</li><li>[ ] 找到 <code>.msi.zip</code> 文件旁边生成的 <code>.sig</code> 签名文件。</li></ul></li></ul><h2 id="阶段三-macos-平台构建" tabindex="-1">阶段三：macOS 平台构建 <a class="header-anchor" href="#阶段三-macos-平台构建" aria-label="Permalink to &quot;阶段三：macOS 平台构建&quot;">​</a></h2><p>此阶段的目标是生成 macOS 平台的安装包。</p><ul><li><p>[ ] <strong>1. 同步环境：</strong></p><ul><li>[ ] 在 macOS 设备上，使用 U 盘或其他方式，将完整的项目代码（<strong>包括私钥文件</strong>）同步过来。</li><li>[ ] 或者，在 macOS 上执行 <code>git pull</code> 并 <code>git checkout v0.6.0</code>，确保代码与 Windows 上的版本完全一致。再通过安全方式（如 U 盘）传输私钥文件。</li></ul></li><li><p>[ ] <strong>2. 准备签名环境：</strong></p><ul><li>[ ] 确保 Tauri 签名所需的 <code>private.key</code> 和 <code>key.pub</code> 文件已放置在正确位置。</li></ul></li><li><p>[ ] <strong>3. 执行打包命令：</strong></p><ul><li>[ ] 在项目根目录运行: <code>pnpm run tauri build</code></li><li>[ ] 根据提示输入私钥密码以完成签名。</li></ul></li><li><p>[ ] <strong>4. 整理产物：</strong></p><ul><li>[ ] 打包完成后，进入 <code>src-tauri/target/release/bundle/dmg/</code> 目录。</li><li>[ ] 找到生成的 <code>.dmg</code> 文件。</li><li>[ ] (可选) 有时也需要 <code>.app.tar.gz</code> 文件，可以一并复制。</li><li>[ ] <strong>关键</strong>：将这些文件 (<code>.dmg</code> 等) 通过 U 盘等方式传回主开发机（Windows）的发布文件夹中。</li></ul></li></ul><h2 id="阶段四-github-release-发布" tabindex="-1">阶段四：GitHub Release 发布 <a class="header-anchor" href="#阶段四-github-release-发布" aria-label="Permalink to &quot;阶段四：GitHub Release 发布&quot;">​</a></h2><p>此阶段的目标是在 GitHub 上创建正式的发布页面，并上传所有平台产物。</p><ul><li><p>[ ] <strong>1. 创建新的 Release：</strong></p><ul><li>[ ] 打开项目的 GitHub 页面，进入 &quot;Releases&quot; 部分。</li><li>[ ] 点击 &quot;Draft a new release&quot;。</li><li>[ ] <strong>&quot;Choose a tag&quot;</strong>: 选择刚刚推送的版本标签 (如 <code>v0.6.0</code>)。</li><li>[ ] <strong>&quot;Release title&quot;</strong>: 填写版本号 (如 <code>v0.6.0</code>)。</li></ul></li><li><p>[ ] <strong>2. 编写更新说明：</strong></p><ul><li>[ ] 从 roadmap.md 中复制准备好的更新日志 (changelog)，粘贴到描述框中。</li><li>[ ] 格式化内容，使其清晰易读（例如使用标题、列表）。</li></ul></li><li><p>[ ] <strong>3. 上传所有附件：</strong></p><ul><li>[ ] 将发布文件夹中的所有文件拖拽或上传到 &quot;Attach binaries&quot;区域： <ul><li>[ ] <code>pomotention_x64_en-US.msi</code></li><li>[ ] <code>pomotention_x64_en-US.msi.zip</code> (Tauri v1) 或 <code>pomotention.exe.nsis.zip</code> (Tauri v2)</li><li>[ ] <code>pomotention_x64-setup.exe</code> (Tauri v1) 或 <code>pomotention.exe</code> (Tauri v2)</li><li>[ ] <code>pomotention.app.tar.gz</code></li><li>[ ] <code>pomotention.dmg</code></li></ul></li></ul></li><li><p>[ ] <strong>4. 发布！</strong></p><ul><li>[ ] 确认所有信息无误后，点击 &quot;Publish release&quot; 按钮。</li></ul></li></ul><h2 id="阶段五-更新应用内升级配置" tabindex="-1">阶段五：更新应用内升级配置 <a class="header-anchor" href="#阶段五-更新应用内升级配置" aria-label="Permalink to &quot;阶段五：更新应用内升级配置&quot;">​</a></h2><p>此阶段的目标是让旧版本的用户能收到新版本的更新推送。</p><ul><li><p>[ ] <strong>1. 编辑 <code>latest.json</code> 文件：</strong></p><ul><li>[ ] 在主开发机上，打开您用于版本更新的 <code>latest.json</code> 文件。</li><li>[ ] <strong>更新 <code>version</code> 字段</strong> 为新版本号 (例如 <code>&quot;version&quot;: &quot;0.6.0&quot;</code>)。</li><li>[ ] <strong>更新 <code>notes</code> 字段</strong> 为本次更新的核心内容。</li><li>[ ] <strong>更新 <code>pub_date</code> 字段</strong> 为当前日期。</li><li>[ ] <strong>更新 <code>platforms</code> 字段</strong>: - <strong><code>windows-x86_64</code></strong>: - <code>signature</code>: 复制 <strong>新生成的 <code>.sig</code> 文件</strong> 的 <strong>全部内容</strong> 并粘贴在此处。 - <code>url</code>: 填写新上传到 GitHub Release 的 <code>.msi.zip</code> 的下载链接。 - <strong><code>darwin-x86_64</code> / <code>darwin-aarch64</code></strong>: - <code>signature</code>: 复制新生成的 <code>app.tar.gz.sig</code> 文件的内容。 - <code>url</code>: 填写新上传的 <code>.app.tar.gz</code> 的下载链接。 <blockquote><p><strong>注意:</strong> URL 必须是 GitHub 提供的稳定下载地址。</p></blockquote></li></ul></li><li><p>[ ] <strong>2. 上传 <code>latest.json</code>：</strong></p><ul><li>[ ] 将修改后的 <code>latest.json</code> 文件上传到 <code>release</code> 页面，覆盖旧文件。</li></ul></li></ul><h2 id="阶段六-最终验证" tabindex="-1">阶段六：最终验证 <a class="header-anchor" href="#阶段六-最终验证" aria-label="Permalink to &quot;阶段六：最终验证&quot;">​</a></h2><p>此阶段的目标是确保整个更新流程正常工作。</p><ul><li>[ ] <strong>1. 清理缓存并验证：</strong><ul><li>[ ] 在一台装有<strong>旧版本</strong> <code>pomotention</code> 的 Windows 测试机上，删除 Tauri 更新器缓存（位于 <code>%APPDATA%/&lt;Your-App-Name&gt;/</code>）。</li><li>[ ] 打开应用，等待或手动触发更新检查。</li><li>[ ] 确认应用能成功弹出更新提示，并能下载、安装新版本。</li></ul></li><li>[ ] <strong>2. (可选) macOS 验证：</strong><ul><li>[ ] 在 macOS 上重复上述验证步骤。</li></ul></li><li>[ ] <strong>3. 完成</strong><ul><li>[ ] 恭喜！本次版本发布成功。</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 1. 添加所有文件变更到Git暂存区（先修改设置文件）</span></span>
<span class="line"><span>git add .</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 2. 提交代码变更，并附上版本更新信息（将 vX.X.X 替换为实际版本）</span></span>
<span class="line"><span>git commit -m &quot;chore(release): bump version to vX.X.X&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 3. 将代码提交推送到远程仓库</span></span>
<span class="line"><span>git push</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 4. 为当前提交创建版本标签（将 vX.X.X 替换为实际版本）</span></span>
<span class="line"><span>git tag vX.X.X</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 5. 将新创建的标签推送到远程仓库，以便在GitHub上创建Release</span></span>
<span class="line"><span>git push origin vX.X.X</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 6. 查看两个标签之间的提交记录</span></span>
<span class="line"><span>git log vOld.Tag..vNew.Tag --oneline</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 7. 录入秘钥(Windows)</span></span>
<span class="line"><span>$env:TAURI_SIGNING_PRIVATE_KEY = &quot;==&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 8. 执行Tauri的构建和打包命令，此命令会自动处理签名流程</span></span>
<span class="line"><span>pnpm run tauri build</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 9. (在Mac上) 拉取远程仓库的最新变更</span></span>
<span class="line"><span>git pull</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 10. (在Mac上) 检出到指定的标签版本，确保代码与发布版本一致</span></span>
<span class="line"><span>git checkout vX.X.X</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 11. (在Mac上)秘钥</span></span>
<span class="line"><span>export TAURI_SIGNING_PRIVATE_KEY=&quot;==&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 12. (在另一台设备上)打包</span></span>
<span class="line"><span>pnpm run tauri build</span></span></code></pre></div>`,20)]))}const m=s(l,[["render",i]]);export{g as __pageData,m as default};
